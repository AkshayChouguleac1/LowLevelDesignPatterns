import java.util.Arrays;
import java.util.List;

// 1. Iterator Interface
interface Iterator<T> {
    boolean hasNext();
    T next();
}

// 2. Collection Interface
interface Collection<T> {
    Iterator<T> createIterator();
}

// 3. Concrete Collection
class BookCollection implements Collection<String> {
    private List<String> books;

    public BookCollection(List<String> books) {
        this.books = books;
    }

    @Override
    public Iterator<String> createIterator() {
        return new BookIterator(books);
    }
}

// 4. Concrete Iterator
class BookIterator implements Iterator<String> {
    private List<String> books;
    private int position = 0;

    public BookIterator(List<String> books) {
        this.books = books;
    }

    @Override
    public boolean hasNext() {
        return position < books.size();
    }

    @Override
    public String next() {
        return books.get(position++);
    }
}

// 5. Client Code
public class IteratorPatternDemo {
    public static void main(String[] args) {
        BookCollection bookCollection = new BookCollection(
            Arrays.asList("Design Patterns", "Clean Code", "Java Concurrency", "Effective Java")
        );

        Iterator<String> iterator = bookCollection.createIterator();

        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}
