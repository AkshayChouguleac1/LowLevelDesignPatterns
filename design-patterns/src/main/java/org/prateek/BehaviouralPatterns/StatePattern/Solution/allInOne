interface TransportationMode {
    int calcETA();
    String getDirection();
}

class DirectionService {
    TransportationMode transportationMode;
    public DirectionService(TransportationMode transportationMode){
        this.transportationMode = transportationMode;
    }
    public void setTransportationMode(TransportationMode mode){
        this.transportationMode = mode;
    }
    //delegating the work current state's concrete class
    public int getETA(){
        return transportationMode.calcETA();
    }
    public String getDirection(){
        return transportationMode.getDirection();
    }
}

public class WithStatePattern {
    public static void main(String[] args) {
        DirectionService service = new DirectionService(new Car());
        // service.setTransportationMode(new Cycling());

        System.out.println("ETA: " + service.getETA());
        System.out.println("Direction: " + service.getDirection());


    }
}

class Car implements TransportationMode {
    @Override
    public int calcETA() {
        System.out.println("Calculating ETA (Car)");
        return 3;  // Example ETA for car
    }

    @Override
    public String getDirection() {
        return "Directions for driving";
    }
}

class Train implements TransportationMode {
    @Override
    public int calcETA() {
        System.out.println("Calculating ETA (Train)");
        return 7;  // Example ETA for train
    }

    @Override
    public String getDirection() {
        return "Directions for train route";
    }
}

class Walking implements TransportationMode{
    @Override
    public int calcETA() {
        System.out.println("Calculating ETA (Walking)");
        return 10;  // Example ETA for walking
    }

    @Override
    public String getDirection() {
        return "Directions for walking";
    }
}
